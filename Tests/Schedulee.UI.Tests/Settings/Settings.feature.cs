// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Schedulee.UI.Tests.Settings
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Settings")]
    public partial class SettingsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Settings.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Settings", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Initial loading of settings page")]
        public virtual void InitialLoadingOfSettingsPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initial loading of settings page", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Email",
                        "ProfilePictureUrl",
                        "Location",
                        "SetTravelTime"});
            table1.AddRow(new string[] {
                        "John",
                        "Smith",
                        "john.smith@mail.com",
                        "http://some.url.com?image=jhon.smith.image",
                        "New York, 31, USA",
                        "20"});
#line 4
 testRunner.Given("I am logged in as", ((string)(null)), table1, "Given ");
#line 7
 testRunner.And("I have navigated to settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.Then("I should see the user data populated correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to save settings while entering invalid data")]
        [NUnit.Framework.TestCaseAttribute("FirstName", "Empty", "FIRST NAME is required.", null)]
        [NUnit.Framework.TestCaseAttribute("LastName", "Empty", "LAST NAME is required.", null)]
        [NUnit.Framework.TestCaseAttribute("Location", "Empty", "LOCATION is required.", null)]
        [NUnit.Framework.TestCaseAttribute("SetTravelTime", "0", "Set Travel Time should be greater than 0.", null)]
        public virtual void TryingToSaveSettingsWhileEnteringInvalidData(string field, string data, string validation_Error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to save settings while entering invalid data", exampleTags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Email",
                        "ProfilePictureUrl",
                        "Location",
                        "SetTravelTime"});
            table2.AddRow(new string[] {
                        "John",
                        "Smith",
                        "john.smith@mail.com",
                        "http://some.url.com?image=jhon.smith.image",
                        "New York, 31, USA",
                        "20"});
#line 11
 testRunner.Given("I am logged in as", ((string)(null)), table2, "Given ");
#line 15
 testRunner.Given("I have navigated to settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And(string.Format("I have entered invalid \'{0}\' into \'{1}\'", data, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I try to save changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then(string.Format("I should see \'{0}\' detailing the \'{1}\' validation issue for \'{2}\'", validation_Error, data, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settings stale properties")]
        [NUnit.Framework.TestCaseAttribute("FirstName", "Marie", null)]
        [NUnit.Framework.TestCaseAttribute("LastName", "Johnson", null)]
        [NUnit.Framework.TestCaseAttribute("Location", "Delaware 81", null)]
        [NUnit.Framework.TestCaseAttribute("SetTravelTime", "80", null)]
        public virtual void SettingsStaleProperties(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settings stale properties", exampleTags);
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Email",
                        "ProfilePictureUrl",
                        "Location",
                        "SetTravelTime"});
            table3.AddRow(new string[] {
                        "John",
                        "Smith",
                        "john.smith@mail.com",
                        "http://some.url.com?image=jhon.smith.image",
                        "New York, 31, USA",
                        "20"});
#line 27
 testRunner.Given("I am logged in as", ((string)(null)), table3, "Given ");
#line 30
 testRunner.Given("I have navigated to settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When(string.Format("I modify \'{0}\' with \'{1}\'", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("When I try to dismiss the screen I should see a warning notifying if I would like" +
                    " to discard pending changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Saving completes successfully")]
        public virtual void SavingCompletesSuccessfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Saving completes successfully", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Email",
                        "ProfilePictureUrl",
                        "Location",
                        "SetTravelTime"});
            table4.AddRow(new string[] {
                        "John",
                        "Smith",
                        "john.smith@mail.com",
                        "http://some.url.com?image=jhon.smith.image",
                        "New York, 31, USA",
                        "20"});
#line 41
 testRunner.Given("I am logged in as", ((string)(null)), table4, "Given ");
#line 44
 testRunner.Given("I have navigated to settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Email",
                        "ProfilePictureUrl",
                        "Location",
                        "SetTravelTime"});
            table5.AddRow(new string[] {
                        "Marie",
                        "Johnson",
                        "marie.johnson@mail.com",
                        "http://some.url.com?image=marie.johnson.image",
                        "Delaware, 83, USA",
                        "40"});
#line 45
 testRunner.And("I have updated my user information with this data", ((string)(null)), table5, "And ");
#line 48
 testRunner.When("I save the data and saving completes successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("the current user information should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
